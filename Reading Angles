#include <math.h>
#include "Arduino_BMI270_BMM150.h"

float gyroX, gyroY, gyroZ;
float accX, accY, accZ;
float angleX = 0, angleY = 0;  // Filtered angles
float prevGyroX = 0, prevGyroY = 0;
unsigned long prevTime = 0;
const float alpha = 0.98;  // Complementary filter weight

void setup() {
  Serial.begin(115200);
  while (!Serial);

  if (!IMU.begin()) {
    Serial.println("Failed to initialize IMU!");
    while (1);
  }
  Serial.println("IMU initialized.");

  prevTime = millis(); // Start time tracking
}

void loop() {
  if (IMU.gyroscopeAvailable() && IMU.accelerationAvailable()) {
    IMU.readGyroscope(gyroX, gyroY, gyroZ);
    IMU.readAcceleration(accX, accY, accZ);

    // Get current time and compute delta time
    unsigned long currentTime = millis();
    float deltaTime = (currentTime - prevTime) / 1000.0;  // Convert to seconds
    prevTime = currentTime;

    // 1. Compute the angle from the accelerometer (tilt estimation)
    float accelAngleX = atan2(accY, accZ) * (180.0 / M_PI);
    float accelAngleY = atan2(accX, accZ) * (180.0 / M_PI);

    // 2. Integrate gyroscope data to get angle change
    float gyroAngleX = angleX + gyroX * deltaTime;
    float gyroAngleY = angleY + gyroY * deltaTime;

    // 3. Apply Complementary Filter
    angleX = alpha * gyroAngleX + (1 - alpha) * accelAngleX;
    angleY = alpha * gyroAngleY + (1 - alpha) * accelAngleY;

    // Output the filtered angles
    Serial.print("Filtered Angle X: ");
    Serial.print(angleX, 2);
    Serial.print(", Y: ");
    Serial.println(angleY, 2);
  }

  delay(10);  // Adjust as needed
}
